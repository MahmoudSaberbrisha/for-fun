<!DOCTYPE html>
<html lang="<%= lang %>" dir="rtl">
  <head>
    <meta charset="UTF-8" />
    <title><%= t('sessions.title') || 'Session Management' %></title>
    <link rel="stylesheet" href="/frontend/styles/style.css" />
    <link rel="stylesheet" href="/frontend/styles/custom-sidebar.css" />
    <style>
      body {
        margin: 0;
        padding: 0;
        font-family: "Cairo", Arial, sans-serif;
        background: linear-gradient(135deg, #e8f5e9 0%, #ffffff 100%);
        min-height: 100vh;
        color: #222;
      }
      .container {
        display: flex;
        width: 100vw;
        min-height: 100vh;
        box-sizing: border-box;
        padding: 0;
        margin: 0;
      }
      .scroll-container {
        flex: 1;
        width: 100%;
        max-width: 100vw;
        min-height: 100vh;
        overflow: auto;
        border: none;
        padding: 40px 40px 40px 40px;
        background: linear-gradient(120deg, #e8f5e9 60%, #ffffff 100%);
        box-sizing: border-box;
        border-radius: 0;
        box-shadow: 0 0 16px 0 #e0f2f1;
      }
      h1,
      h2 {
        color: #218c4c;
        margin-top: 0;
        font-weight: bold;
        letter-spacing: 1px;
      }
      form {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 12px #c8e6c9;
        padding: 24px 24px 12px 24px;
        margin-bottom: 32px;
        max-width: 700px;
        width: 100%;
      }
      .form-group {
        margin-bottom: 18px;
      }
      .form-group label {
        display: block;
        margin-bottom: 6px;
        color: #218c4c;
        font-weight: 600;
      }
      .form-group input,
      .form-group select,
      .form-group textarea {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #b2dfdb;
        border-radius: 6px;
        background: #f9fff9;
        font-size: 1rem;
        transition: border 0.2s;
      }
      .form-group input:focus,
      .form-group select:focus,
      .form-group textarea:focus {
        border: 1.5px solid #43a047;
        outline: none;
        background: #e8f5e9;
      }
      .button {
        padding: 10px 20px;
        margin-right: 8px;
        margin-bottom: 8px;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s, box-shadow 0.2s;
        box-shadow: 0 1px 4px #b2dfdb;
      }
      .button.edit {
        background-color: #43a047;
        color: #fff;
      }
      .button.delete {
        background-color: #e53935;
        color: #fff;
      }
      .button.print {
        background-color: #009688;
        color: #fff;
      }
      .button:hover {
        filter: brightness(1.08);
        box-shadow: 0 2px 8px #a5d6a7;
      }
      .search-input {
        margin-bottom: 18px;
        padding: 10px 14px;
        width: 350px;
        border-radius: 6px;
        border: 1px solid #b2dfdb;
        background: #f9fff9;
        font-size: 1rem;
        transition: border 0.2s;
      }
      .search-input:focus {
        border: 1.5px solid #43a047;
        background: #e8f5e9;
      }
      table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-bottom: 32px;
        background: #fff;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 12px #c8e6c9;
      }
      th,
      td {
        border-bottom: 1px solid #e0f2f1;
        padding: 12px 10px;
        text-align: left;
        font-size: 1rem;
      }
      th {
        background: linear-gradient(90deg, #43a047 80%, #e8f5e9 100%);
        color: #fff;
        font-weight: bold;
        border-bottom: 2px solid #388e3c;
      }
      tr:last-child td {
        border-bottom: none;
      }
      tr:nth-child(even) td {
        background: #f1f8e9;
      }
      tr:hover td {
        background: #e8f5e9;
        transition: background 0.2s;
      }
      .remaining-time {
        font-weight: bold;
        color: #388e3c;
      }
      @media (max-width: 900px) {
        .scroll-container {
          padding: 16px 4vw;
        }
        form {
          padding: 12px 8px 8px 8px;
        }
        .search-input {
          width: 100%;
        }
        table,
        th,
        td {
          font-size: 0.95rem;
        }
      }
      @media (max-width: 600px) {
        .container {
          flex-direction: column;
        }
        .scroll-container {
          padding: 8px 2vw;
        }
        form {
          padding: 8px 2px 2px 2px;
        }
        table,
        th,
        td {
          font-size: 0.9rem;
        }
      }
    </style>
  </head>
  <body>
    <%- include('partials/navbar') %>
    <div class="container" style="margin-top: 20px">
      <%- include('partials/sidebar') %>
      <div class="scroll-container">
        <h1>فتح اجتماع (Open Session)</h1>
        <form id="sessionForm">
          <div class="form-group">
            <label for="sessionNumber">رقم رقم الاجتماع (Session Number)</label>
            <input
              type="text"
              id="sessionNumber"
              name="sessionNumber"
              value="<%= nextSessionNumber %>"
              readonly
              required
            />
          </div>
          <div class="form-group">
            <label for="date">تاريخ الاجتماع (Date)</label>
            <input type="date" id="date" name="date" required />
          </div>
          <div class="form-group">
            <label for="day">اليوم (Day)</label>
            <select id="day" name="day" required>
              <option value="" disabled selected>اختر اليوم</option>
              <option value="الأحد">الأحد</option>
              <option value="الإثنين">الإثنين</option>
              <option value="الثلاثاء">الثلاثاء</option>
              <option value="الأربعاء">الأربعاء</option>
              <option value="الخميس">الخميس</option>
              <option value="الجمعة">الجمعة</option>
              <option value="السبت">السبت</option>
            </select>
          </div>
          <div class="form-group">
            <label for="time">وقت الجلسه (Time)</label>
            <input type="time" id="time" name="time" required />
          </div>
          <div class="form-group">
            <label for="duration"
              >مده الجلسه بالدقيقه (Duration in minutes)</label
            >
            <input type="number" id="duration" name="duration" required />
          </div>
          <div class="form-group">
            <label for="location">مكان انعقاد الاجتماع (Location)</label>
            <select id="location" name="location" required>
              <option value="" disabled selected>اختر المكان</option>
              <% if (meetingPlaces && meetingPlaces.length > 0) { %> <%
              meetingPlaces.forEach(function(place) { %>
              <option value="<%= place.name %>"><%= place.name %></option>
              <% }) %> <% } %>
            </select>
          </div>
          <div class="form-group">
            <label for="secretary">مقرر الاجتماع (Secretary)</label>
            <select id="secretary" name="secretary" required>
              <option value="" disabled selected>اختر المقرر</option>
              <% if (members && members.length > 0) { %> <%
              members.forEach(function(member) { %>
              <option value="<%= member.name %>"><%= member.name %></option>
              <% }) %> <% } %>
            </select>
          </div>
          <div class="form-group">
            <label for="topic">الموضوع (Topic)</label>
            <textarea id="topic" name="topic" required></textarea>
          </div>
          <button type="submit" class="button" style="background: #218c4c">
            فتح الاجتماع (Open Session)
          </button>
        </form>

        <h2>الجلسات التي تمت بالفعل (Sessions Held)</h2>
        <input
          type="text"
          id="searchSessions"
          class="search-input"
          placeholder="بحث (Search Sessions)"
        />
        <table id="sessionsTable">
          <thead>
            <tr>
              <th>رقم الجلسه</th>
              <th>تاريخ الجلسه</th>
              <th>اليوم</th>
              <th>وقت الجلسه</th>
              <th>مده الجلسه بالدقيقه</th>
              <th>مكان انعقاد الجلسه</th>
              <th>مقرر الجلسه</th>
              <th>الموضوع</th>
              <th>تعديل</th>
              <th>حذف</th>
              <th>الوقت المتبقي</th>
            </tr>
          </thead>
          <tbody>
            <% if (sessions && sessions.length > 0) { %> <%
            sessions.forEach(function(session) { %>
            <tr data-id="<%= session._id %>">
              <td><%= session.sessionNumber %></td>
              <td>
                <%= session.date ? session.date.toISOString().substring(0, 10) :
                '' %>
              </td>
              <td><%= session.day %></td>
              <td><%= session.time %></td>
              <td><%= session.duration %></td>
              <td><%= session.location %></td>
              <td><%= session.secretary %></td>
              <td><%= session.topic %></td>
              <td>
                <button
                  class="button edit"
                  onclick="editSession('<%= session._id %>')"
                >
                  تعديل
                </button>
              </td>
              <td>
                <button
                  class="button delete"
                  onclick="deleteSession('<%= session._id %>')"
                >
                  حذف
                </button>
              </td>
              <td
                class="remaining-time"
                data-time="<%= session.time %>"
                data-duration="<%= session.duration %>"
              >
                حساب الوقت...
              </td>
            </tr>
            <% }) %> <% } else { %>
            <tr>
              <td colspan="11">لا توجد جلسات حالياً</td>
            </tr>
            <% } %>
          </tbody>
        </table>

        <h2>جدول اعمال الجلسات (Agenda Table)</h2>
        <input
          type="text"
          id="searchAgenda"
          class="search-input"
          placeholder="بحث (Search Agenda)"
        />
        <table id="agendaTable">
          <thead>
            <tr>
              <th>رقم الجلسه</th>
              <th>تاريخ الجلسه</th>
              <th>كود المجلس</th>
              <th>اعضاء الجلسه</th>
              <th>رقم المحور</th>
              <th>عباره عن</th>
              <th>تعديل</th>
              <th>حذف</th>
            </tr>
          </thead>
          <tbody>
            <!-- Agenda rows will be dynamically added here -->
          </tbody>
        </table>
        <button class="button print" onclick="printAgenda()">
          طباعة (Print)
        </button>

        <script>
          // Handle session form submission
          document
            .getElementById("sessionForm")
            .addEventListener("submit", async function (e) {
              e.preventDefault();
              const formData = {
                sessionNumber: this.sessionNumber.value,
                date: this.date.value,
                day: this.day.value,
                time: this.time.value,
                duration: parseInt(this.duration.value),
                location: this.location.value,
                secretary: this.secretary.value,
                topic: this.topic.value,
                status: "Open",
              };
              try {
                const response = await fetch("/api/sessions", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(formData),
                });
                if (response.ok) {
                  alert("تم فتح الجلسه بنجاح");
                  location.reload();
                } else {
                  alert("حدث خطأ أثناء فتح الجلسه");
                }
              } catch (error) {
                alert("خطأ في الاتصال بالخادم");
              }
            });

          // Search sessions in the sessions table
          document
            .getElementById("searchSessions")
            .addEventListener("input", function () {
              const filter = this.value.toLowerCase();
              const rows = document.querySelectorAll("#sessionsTable tbody tr");
              rows.forEach((row) => {
                const cells = row.querySelectorAll("td");
                let match = false;
                cells.forEach((cell) => {
                  if (cell.textContent.toLowerCase().includes(filter)) {
                    match = true;
                  }
                });
                row.style.display = match ? "" : "none";
              });
            });

          // Edit session function
          async function editSession(sessionId) {
            try {
              const response = await fetch(`/api/sessions/${sessionId}`);
              if (!response.ok) {
                alert("فشل في جلب بيانات الجلسة");
                return;
              }
              const session = await response.json();
              // Populate form with session data for editing
              document.getElementById("sessionNumber").value =
                session.data.sessionNumber || "";
              document.getElementById("date").value = session.data.date
                ? new Date(session.data.date).toISOString().substring(0, 10)
                : "";
              document.getElementById("day").value = session.data.day || "";
              document.getElementById("time").value = session.data.time || "";
              document.getElementById("duration").value =
                session.data.duration || "";
              document.getElementById("location").value =
                session.data.location || "";
              document.getElementById("secretary").value =
                session.data.secretary || "";
              document.getElementById("topic").value = session.data.topic || "";
              // Change form submit to update mode
              const form = document.getElementById("sessionForm");
              form.removeEventListener("submit", submitNewSession);
              form.addEventListener("submit", async function updateHandler(e) {
                e.preventDefault();
                const formData = {
                  sessionNumber: document.getElementById("sessionNumber").value,
                  date: document.getElementById("date").value,
                  day: document.getElementById("day").value,
                  time: document.getElementById("time").value,
                  duration: parseInt(document.getElementById("duration").value),
                  location: document.getElementById("location").value,
                  secretary: document.getElementById("secretary").value,
                  topic: document.getElementById("topic").value,
                  status: "Open",
                };
                try {
                  const updateResponse = await fetch(
                    `/api/sessions/${sessionId}`,
                    {
                      method: "PUT",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify(formData),
                    }
                  );
                  if (updateResponse.ok) {
                    alert("تم تحديث الجلسة بنجاح");
                    location.reload();
                  } else {
                    alert("فشل في تحديث الجلسة");
                  }
                } catch (error) {
                  alert("خطأ في الاتصال بالخادم");
                }
                // Remove this event listener after update to prevent multiple bindings
                form.removeEventListener("submit", updateHandler);
                // Re-add the original submit handler for new session creation
                form.addEventListener("submit", submitNewSession);
              });
            } catch (error) {
              alert("خطأ في الاتصال بالخادم");
            }
          }

          // Delete session function
          async function deleteSession(sessionId) {
            if (!confirm("هل أنت متأكد من حذف هذه الجلسة؟")) {
              return;
            }
            try {
              const response = await fetch(`/api/sessions/${sessionId}`, {
                method: "DELETE",
              });
              if (response.ok) {
                alert("تم حذف الجلسة بنجاح");
                location.reload();
              } else {
                alert("فشل في حذف الجلسة");
              }
            } catch (error) {
              alert("خطأ في الاتصال بالخادم");
            }
          }

          // Original submit handler for creating new session
          async function submitNewSession(e) {
            e.preventDefault();
            const formData = {
              sessionNumber: document.getElementById("sessionNumber").value,
              date: document.getElementById("date").value,
              day: document.getElementById("day").value,
              time: document.getElementById("time").value,
              duration: parseInt(document.getElementById("duration").value),
              location: document.getElementById("location").value,
              secretary: document.getElementById("secretary").value,
              topic: document.getElementById("topic").value,
              status: "Open",
            };
            try {
              const response = await fetch("/api/sessions", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData),
              });
              if (response.ok) {
                alert("تم فتح الجلسه بنجاح");
                location.reload();
              } else {
                alert("حدث خطأ أثناء فتح الجلسه");
              }
            } catch (error) {
              alert("خطأ في الاتصال بالخادم");
            }
          }

          // Attach the original submit handler
          document
            .getElementById("sessionForm")
            .addEventListener("submit", submitNewSession);

          // Fetch and populate agenda table based on status filter
          async function fetchAgendaByStatus(status) {
            try {
              let url = "/api/sessions/search";
              if (status && status !== "All") {
                url += "?status=" + encodeURIComponent(status);
              }
              const response = await fetch(url);
              if (response.ok) {
                const data = await response.json();
                populateAgendaTable(data.data);
              } else {
                alert("فشل في جلب جدول الاعمال");
              }
            } catch (error) {
              alert("خطأ في الاتصال بالخادم");
            }
          }

          // Populate agenda table rows
          function populateAgendaTable(sessions) {
            const tbody = document.querySelector("#agendaTable tbody");
            tbody.innerHTML = "";
            if (!sessions || sessions.length === 0) {
              tbody.innerHTML = '<tr><td colspan="8">لا توجد جلسات</td></tr>';
              return;
            }
            sessions.forEach((session) => {
              const tr = document.createElement("tr");
              tr.innerHTML = `
            <td>${session.sessionNumber || ""}</td>
            <td>${
              session.date
                ? new Date(session.date).toISOString().substring(0, 10)
                : ""
            }</td>
            <td>${session.councilCode || ""}</td>
            <td>${session.members || ""}</td>
            <td>${session.axisNumber || ""}</td>
            <td>${session.description || ""}</td>
            <td><button class="button edit" onclick="editAgenda('${
              session._id
            }')">تعديل</button></td>
            <td><button class="button delete" onclick="deleteAgenda('${
              session._id
            }')">حذف</button></td>
          `;
              tbody.appendChild(tr);
            });
          }

          // Event listener for status filter change
          document
            .getElementById("statusFilter")
            .addEventListener("change", function () {
              fetchAgendaByStatus(this.value);
            });

          // Initial fetch of agenda table with all sessions
          fetchAgendaByStatus("All");

          // Calculate and update remaining time for each session
          function updateRemainingTime() {
            const now = new Date();
            document.querySelectorAll(".remaining-time").forEach((td) => {
              const timeStr = td.getAttribute("data-time");
              const duration = parseInt(td.getAttribute("data-duration"));
              if (!timeStr || isNaN(duration)) {
                td.textContent = "غير متوفر";
                return;
              }
              // Parse time string (HH:mm)
              const [hours, minutes] = timeStr.split(":").map(Number);
              if (isNaN(hours) || isNaN(minutes)) {
                td.textContent = "غير متوفر";
                return;
              }
              // Calculate end time
              const endTime = new Date(now);
              endTime.setHours(hours);
              endTime.setMinutes(minutes + duration);
              endTime.setSeconds(0);
              endTime.setMilliseconds(0);

              const diffMs = endTime - now;
              if (diffMs <= 0) {
                td.textContent = "جلسه منتهيه";
              } else {
                const diffMins = Math.floor(diffMs / 60000);
                const diffHrs = Math.floor(diffMins / 60);
                const mins = diffMins % 60;
                td.textContent =
                  diffHrs > 0
                    ? `${diffHrs} ساعة و ${mins} دقيقة متبقية`
                    : `${mins} دقيقة متبقية`;
              }
            });
          }

          // Update remaining time every minute
          updateRemainingTime();
          setInterval(updateRemainingTime, 60000);
        </script>
      </div>
    </div>
  </body>
</html>
